{"version":3,"file":"static/js/543.b3486d2d.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/Contacts.styled.js","components/Error/Error.styled.js","components/Error/Error.jsx","pages/Contacts.jsx","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  padding: 40px 20px;\n\n  background-color: var(--white-color);\n  box-shadow: var(--box-shadow);\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 28px;\n\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n  text-transform: uppercase;\n`;\n","import PropTypes from 'prop-types';\nimport { Title, Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const FilterLabel = styled.label`\n  display: block;\n\n  margin-bottom: 28px;\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n\n  width: 100%;\n  border-radius: 8px;\n  border: 1px solid var(--text-black-color);\n  padding: 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const ResetBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n\n  width: 16px;\n  height: 16px;\n  padding: 0;\n  border: none;\n\n  color: var(--black-color);\n  background-color: transparent;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus) {\n    color: var(--blue-color);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { selectFilterValue } from 'redux/selectors';\nimport { filterContacts } from 'redux/filterSlice';\nimport {\n  FilterLabel,\n  FilterInput,\n  SearchIcon,\n  WrapperInput,\n  ResetBtn,\n} from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  const onChange = evt => {\n    const value = evt.currentTarget.value.trim();\n\n    dispatch(filterContacts(value));\n  };\n\n  const onReset = evt => {\n    const label = evt.currentTarget.closest('label');\n    label.control.value = '';\n\n    dispatch(filterContacts(''));\n  };\n\n  return (\n    <>\n      <FilterLabel>\n        Find contact by name or number\n        <WrapperInput>\n          <FilterInput\n            type=\"text\"\n            value={filter}\n            placeholder=\"Name or number\"\n            onChange={onChange}\n          />\n          <SearchIcon />\n          {filter && (\n            <ResetBtn type=\"button\" onClick={onReset}>\n              <AiOutlineClose />\n            </ResetBtn>\n          )}\n        </WrapperInput>\n      </FilterLabel>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactInfo = styled.p`\n  margin-right: 12px;\n\n  font-weight: 700;\n`;\n\nexport const ContactNumber = styled.span`\n  margin-right: auto;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n\n  border-radius: 18px;\n  border: 1px solid var(--text-black-color);\n  padding: 8px 12px;\n\n  color: currentColor;\n  background-color: transparent;\n\n  transition: color var(--transition-duration)\n  var(--transition-timing-function), border-color var(--transition-duration)\n  var(--transition-timing-function);\n\n&:is(:hover, :focus, :active) {\n  color: var(--red-color);\n  border-color: var(--red-color);\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { GoTrash } from 'react-icons/go';\nimport { deleteContact } from 'redux/operations';\nimport { Button, ContactInfo, ContactNumber } from './Contact.styled';\n\nexport const Contact = ({ contact = {} }) => {\n  const dispatch = useDispatch();\n\n  const onDelete = (id, name) => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(resp => {\n        toast.remove();\n        toast.success(`${name} deleted from contacts`);\n      })\n      .catch(error => {\n        toast.remove();\n        toast.error('Oops, something went wrong. Try again.');\n      });\n  };\n\n  const { id, name, number } = contact;\n\n  return (\n    <>\n      <ContactInfo>{`${name}: `}</ContactInfo>\n      <ContactNumber>{number}</ContactNumber>\n\n      <Button type=\"button\" onClick={() => onDelete(id, name)}>\n        <GoTrash size={20} />\n        <p>Delete</p>\n      </Button>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  transform: scale(1, 1);\n\n  display: flex;\n  align-items: center;\n\n  border-radius: 8px;\n  border: 2px solid rgb(228 228 228);\n  padding: 16px 20px;\n\n  box-shadow: 0px 1px 6px rgba(46, 47, 66, 0.08),\n    0px 1px 1px rgba(46, 47, 66, 0.16), 0px 2px 1px rgba(46, 47, 66, 0.08);\n\n  transition: transform var(--transition-duration)\n    var(--transition-timing-function);\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n\n  &:is(:hover) {\n    transform: scale(1.02, 1.1);\n  }\n`;\n\nexport const NoContactsText = styled.p`\n  text-align: center;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { Contact } from 'components/Contact/Contact';\nimport { ListItem, NoContactsText } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return contacts.length ? (\n    <ul>\n      {contacts.map(contact => (\n        <ListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ListItem>\n      ))}\n    </ul>\n  ) : (\n    <NoContactsText>No contacts found for the entered name</NoContactsText>\n  );\n};\n","import styled from 'styled-components';\n\nexport const NoContactsText = styled.p`\n  text-align: center;\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n\n  width: 100%;\n  height: calc(100vh - 134px);\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 18px;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n`;\n","import { BsEmojiFrown } from 'react-icons/bs';\nimport { Text, Wrapper } from './Error.styled';\n\nexport const Error = () => {\n  return (\n    <Wrapper>\n      <BsEmojiFrown size={64} />\n      <Text>Oops, something went wrong. Try reloading the page.</Text>\n    </Wrapper>\n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport toast from 'react-hot-toast';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Loader } from 'components/Loader/Loader';\nimport { NoContactsText } from './Contacts.styled';\nimport { Error } from 'components/Error/Error';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    return () => {\n      toast.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n      .unwrap()\n      .catch(error => {\n        toast.remove();\n        toast.error('Oops, something went wrong. Try reloading the page.');\n      });\n  }, [dispatch]);\n\n  return (\n    <main>\n      {!error ? (\n        <Section title=\"Contacts\">\n          {contacts.length > 0 ? (\n            <>\n              <Filter />\n              <ContactsList />\n            </>\n          ) : (\n            <NoContactsText>No contacts</NoContactsText>\n          )}\n\n          {isLoading && <Loader />}\n        </Section>\n      ) : (\n        <Error />\n      )}\n    </main>\n  );\n};\n\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.value;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n        contact.number.includes(filter)\n    );\n  }\n);\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","FilterLabel","WrapperInput","FilterInput","_templateObject3","SearchIcon","BsSearch","_templateObject4","ResetBtn","_templateObject5","Filter","dispatch","useDispatch","filter","useSelector","selectFilterValue","_Fragment","type","value","placeholder","onChange","evt","currentTarget","trim","filterContacts","onClick","closest","control","AiOutlineClose","ContactInfo","ContactNumber","Button","Contact","_ref$contact","contact","id","name","number","concat","deleteContact","unwrap","then","resp","toast","catch","error","onDelete","GoTrash","size","ListItem","NoContactsText","ContactsList","contacts","selectVisibleContacts","length","map","Text","Error","BsEmojiFrown","selectContacts","isLoading","selectIsLoading","selectError","useEffect","fetchContacts","Loader","state","items","createSelector","toLowerCase","includes"],"sourceRoot":""}